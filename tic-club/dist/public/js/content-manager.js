class ContentManager{constructor(){this.contentTypes=["gallery","events","team","press"],this.currentType=null,this.init()}init(){this.setupEventListeners(),this.loadContentTypes()}setupEventListeners(){document.getElementById("contentTypeSelect")?.addEventListener("change",(t=>{this.currentType=t.target.value,this.loadContent(this.currentType)})),document.getElementById("addContentBtn")?.addEventListener("click",(()=>{this.showAddContentForm()}))}async loadContentTypes(){const t=document.getElementById("contentSection");t&&(t.innerHTML=`\n            <div class="content-header">\n                <div class="content-controls">\n                    <select id="contentTypeSelect" class="content-select">\n                        ${this.contentTypes.map((t=>`<option value="${t}">${t.charAt(0).toUpperCase()+t.slice(1)}</option>`)).join("")}\n                    </select>\n                    <button id="addContentBtn" class="add-content-btn">\n                        <i class="fas fa-plus"></i> Add New\n                    </button>\n                </div>\n            </div>\n            <div id="contentList" class="content-list"></div>\n            <div id="contentForm" class="content-form hidden"></div>\n        `,this.currentType=this.contentTypes[0],await this.loadContent(this.currentType))}async loadContent(t){if(document.getElementById("contentList"))try{const e=await fetch(`/api/admin/content/${t}`,{headers:{Authorization:`Bearer ${localStorage.getItem("accessToken")}`}});if(!e.ok)throw new Error("Failed to load content");const n=await e.json();this.renderContentList(n)}catch(t){this.showError("Failed to load content. Please try again.")}}renderContentList(t){const e=document.getElementById("contentList");e&&(e.innerHTML=t.map((t=>`\n            <div class="content-item" data-id="${t._id}">\n                <div class="content-item-preview">\n                    ${t.image?`<img src="${t.image}" alt="${t.title}">`:""}\n                </div>\n                <div class="content-item-details">\n                    <h3>${t.title}</h3>\n                    <p>${t.description?.substring(0,100)}...</p>\n                </div>\n                <div class="content-item-actions">\n                    <button onclick="contentManager.editContent('${t._id}')" class="edit-btn">\n                        <i class="fas fa-edit"></i>\n                    </button>\n                    <button onclick="contentManager.deleteContent('${t._id}')" class="delete-btn">\n                        <i class="fas fa-trash"></i>\n                    </button>\n                </div>\n            </div>\n        `)).join(""))}showAddContentForm(){const t=document.getElementById("contentForm");t&&(t.classList.remove("hidden"),t.innerHTML=`\n            <form id="addContentForm" class="form">\n                <h3>Add New ${this.currentType.charAt(0).toUpperCase()+this.currentType.slice(1)}</h3>\n                <div class="form-group">\n                    <label for="title">Title</label>\n                    <input type="text" id="title" name="title" required>\n                </div>\n                <div class="form-group">\n                    <label for="description">Description</label>\n                    <textarea id="description" name="description" required></textarea>\n                </div>\n                <div class="form-group">\n                    <label for="image">Image URL</label>\n                    <input type="text" id="image" name="image">\n                </div>\n                ${this.getTypeSpecificFields()}\n                <div class="form-actions">\n                    <button type="submit" class="submit-btn">Save</button>\n                    <button type="button" onclick="contentManager.hideForm()" class="cancel-btn">Cancel</button>\n                </div>\n            </form>\n        `,document.getElementById("addContentForm")?.addEventListener("submit",(t=>{t.preventDefault(),this.saveContent(new FormData(t.target))})))}getTypeSpecificFields(){switch(this.currentType){case"events":return'\n                    <div class="form-group">\n                        <label for="date">Event Date</label>\n                        <input type="datetime-local" id="date" name="date" required>\n                    </div>\n                    <div class="form-group">\n                        <label for="location">Location</label>\n                        <input type="text" id="location" name="location" required>\n                    </div>\n                ';case"team":return'\n                    <div class="form-group">\n                        <label for="role">Role</label>\n                        <input type="text" id="role" name="role" required>\n                    </div>\n                    <div class="form-group">\n                        <label for="socialLinks">Social Links (comma-separated)</label>\n                        <input type="text" id="socialLinks" name="socialLinks">\n                    </div>\n                ';default:return""}}async saveContent(t){try{const e=Object.fromEntries(t.entries());if(!(await fetch(`/api/admin/content/${this.currentType}`,{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${localStorage.getItem("accessToken")}`},body:JSON.stringify(e)})).ok)throw new Error("Failed to save content");this.hideForm(),await this.loadContent(this.currentType),this.showSuccess("Content saved successfully!")}catch(t){this.showError("Failed to save content. Please try again.")}}async editContent(t){try{const e=await fetch(`/api/admin/content/${this.currentType}/${t}`,{headers:{Authorization:`Bearer ${localStorage.getItem("accessToken")}`}});if(!e.ok)throw new Error("Failed to load content");const n=await e.json();this.showEditForm(n)}catch(t){this.showError("Failed to load content for editing. Please try again.")}}showEditForm(t){this.showAddContentForm();const e=document.getElementById("addContentForm");e&&(Object.entries(t).forEach((([t,n])=>{const o=e.elements[t];o&&("datetime-local"===o.type?o.value=new Date(n).toISOString().slice(0,16):o.value=n)})),e.onsubmit=async e=>{e.preventDefault(),await this.updateContent(t._id,new FormData(e.target))})}async updateContent(t,e){try{const n=Object.fromEntries(e.entries());if(!(await fetch(`/api/admin/content/${this.currentType}/${t}`,{method:"PUT",headers:{"Content-Type":"application/json",Authorization:`Bearer ${localStorage.getItem("accessToken")}`},body:JSON.stringify(n)})).ok)throw new Error("Failed to update content");this.hideForm(),await this.loadContent(this.currentType),this.showSuccess("Content updated successfully!")}catch(t){this.showError("Failed to update content. Please try again.")}}async deleteContent(t){if(confirm("Are you sure you want to delete this item?"))try{if(!(await fetch(`/api/admin/content/${this.currentType}/${t}`,{method:"DELETE",headers:{Authorization:`Bearer ${localStorage.getItem("accessToken")}`}})).ok)throw new Error("Failed to delete content");await this.loadContent(this.currentType),this.showSuccess("Content deleted successfully!")}catch(t){this.showError("Failed to delete content. Please try again.")}}hideForm(){const t=document.getElementById("contentForm");t&&(t.classList.add("hidden"),t.innerHTML="")}showError(t){const e=document.getElementById("errorMessage");e&&(e.textContent=t,e.classList.add("active"),setTimeout((()=>e.classList.remove("active")),5e3))}showSuccess(t){console.log(t)}}const contentManager=new ContentManager;